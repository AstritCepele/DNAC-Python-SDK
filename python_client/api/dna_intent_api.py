# coding: utf-8

"""
    Swagger

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from python_client.api_client import ApiClient


class DnaIntentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_dna_intent_delete_application(self, application_id, **kwargs):  # noqa: E501
        """Delete Application  # noqa: E501

        Invoke the API to delete a custom application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_dna_intent_delete_application(application_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str application_id:  (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_dna_intent_delete_application_with_http_info(application_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dna_intent_delete_application_with_http_info(application_id, **kwargs)  # noqa: E501
            return data

    def delete_dna_intent_delete_application_with_http_info(self, application_id, **kwargs):  # noqa: E501
        """Delete Application  # noqa: E501

        Invoke the API to delete a custom application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_dna_intent_delete_application_with_http_info(application_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str application_id:  (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_id', 'runsync', 'timeout']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dna_intent_delete_application" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_id' is set
        if ('application_id' not in params or
                params['application_id'] is None):
            raise ValueError("Missing the required parameter `application_id` when calling `delete_dna_intent_delete_application`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501
        if 'application_id' in params:
            header_params['applicationId'] = params['application_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/delete-application', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dna_intent_delete_application_set(self, application_set_id, **kwargs):  # noqa: E501
        """Delete Application Set  # noqa: E501

        Invoke the API to delete a custom application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_dna_intent_delete_application_set(application_set_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str application_set_id:  (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_dna_intent_delete_application_set_with_http_info(application_set_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dna_intent_delete_application_set_with_http_info(application_set_id, **kwargs)  # noqa: E501
            return data

    def delete_dna_intent_delete_application_set_with_http_info(self, application_set_id, **kwargs):  # noqa: E501
        """Delete Application Set  # noqa: E501

        Invoke the API to delete a custom application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_dna_intent_delete_application_set_with_http_info(application_set_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str application_set_id:  (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['application_set_id', 'runsync', 'timeout']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dna_intent_delete_application_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'application_set_id' is set
        if ('application_set_id' not in params or
                params['application_set_id'] is None):
            raise ValueError("Missing the required parameter `application_set_id` when calling `delete_dna_intent_delete_application_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501
        if 'application_set_id' in params:
            header_params['applicationSetId'] = params['application_set_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/delete-application-set', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dna_intent_delete_ssid(self, device_name, wireless_network_profile_name, ssid_name, interface_name, **kwargs):  # noqa: E501
        """Delete SSID  # noqa: E501

        De-provision WLC, also removes wireless network profile, SSID and dynamic interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_dna_intent_delete_ssid(device_name, wireless_network_profile_name, ssid_name, interface_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_name:  (required)
        :param str wireless_network_profile_name:  (required)
        :param str ssid_name:  (required)
        :param str interface_name:  (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: DeleteSSIDResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_dna_intent_delete_ssid_with_http_info(device_name, wireless_network_profile_name, ssid_name, interface_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dna_intent_delete_ssid_with_http_info(device_name, wireless_network_profile_name, ssid_name, interface_name, **kwargs)  # noqa: E501
            return data

    def delete_dna_intent_delete_ssid_with_http_info(self, device_name, wireless_network_profile_name, ssid_name, interface_name, **kwargs):  # noqa: E501
        """Delete SSID  # noqa: E501

        De-provision WLC, also removes wireless network profile, SSID and dynamic interface  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_dna_intent_delete_ssid_with_http_info(device_name, wireless_network_profile_name, ssid_name, interface_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str device_name:  (required)
        :param str wireless_network_profile_name:  (required)
        :param str ssid_name:  (required)
        :param str interface_name:  (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: DeleteSSIDResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_name', 'wireless_network_profile_name', 'ssid_name', 'interface_name', 'runsync', 'timeout']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dna_intent_delete_ssid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_name' is set
        if ('device_name' not in params or
                params['device_name'] is None):
            raise ValueError("Missing the required parameter `device_name` when calling `delete_dna_intent_delete_ssid`")  # noqa: E501
        # verify the required parameter 'wireless_network_profile_name' is set
        if ('wireless_network_profile_name' not in params or
                params['wireless_network_profile_name'] is None):
            raise ValueError("Missing the required parameter `wireless_network_profile_name` when calling `delete_dna_intent_delete_ssid`")  # noqa: E501
        # verify the required parameter 'ssid_name' is set
        if ('ssid_name' not in params or
                params['ssid_name'] is None):
            raise ValueError("Missing the required parameter `ssid_name` when calling `delete_dna_intent_delete_ssid`")  # noqa: E501
        # verify the required parameter 'interface_name' is set
        if ('interface_name' not in params or
                params['interface_name'] is None):
            raise ValueError("Missing the required parameter `interface_name` when calling `delete_dna_intent_delete_ssid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_name' in params:
            path_params['deviceName'] = params['device_name']  # noqa: E501
        if 'wireless_network_profile_name' in params:
            path_params['wirelessNetworkProfileName'] = params['wireless_network_profile_name']  # noqa: E501
        if 'ssid_name' in params:
            path_params['ssidName'] = params['ssid_name']  # noqa: E501
        if 'interface_name' in params:
            path_params['interfaceName'] = params['interface_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/delete-ssid/${deviceName}/${wirelessNetworkProfileName}/${ssidName}/${interfaceName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteSSIDResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dna_intent_application_count(self, count, **kwargs):  # noqa: E501
        """Get Applications Count  # noqa: E501

        Invoke the API to return the number of defined applications  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dna_intent_application_count(count, async=True)
        >>> result = thread.get()

        :param async bool
        :param str count:  (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_dna_intent_application_count_with_http_info(count, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dna_intent_application_count_with_http_info(count, **kwargs)  # noqa: E501
            return data

    def get_dna_intent_application_count_with_http_info(self, count, **kwargs):  # noqa: E501
        """Get Applications Count  # noqa: E501

        Invoke the API to return the number of defined applications  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dna_intent_application_count_with_http_info(count, async=True)
        >>> result = thread.get()

        :param async bool
        :param str count:  (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['count', 'runsync', 'timeout']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dna_intent_application_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'count' is set
        if ('count' not in params or
                params['count'] is None):
            raise ValueError("Missing the required parameter `count` when calling `get_dna_intent_application_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'count' in params:
            path_params['count'] = params['count']  # noqa: E501

        query_params = []

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/application/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dna_intent_application_policy(self, **kwargs):  # noqa: E501
        """Get Application Policies  # noqa: E501

        Invoke the API to return all (or specific) application-policy(ies)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dna_intent_application_policy(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :param float offset: 
        :param float limit: 
        :param str application_policy_namespace: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_dna_intent_application_policy_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_dna_intent_application_policy_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_dna_intent_application_policy_with_http_info(self, **kwargs):  # noqa: E501
        """Get Application Policies  # noqa: E501

        Invoke the API to return all (or specific) application-policy(ies)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dna_intent_application_policy_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :param float offset: 
        :param float limit: 
        :param str application_policy_namespace: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['runsync', 'timeout', 'offset', 'limit', 'application_policy_namespace']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dna_intent_application_policy" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501
        if 'offset' in params:
            header_params['offset'] = params['offset']  # noqa: E501
        if 'limit' in params:
            header_params['limit'] = params['limit']  # noqa: E501
        if 'application_policy_namespace' in params:
            header_params['applicationPolicyNamespace'] = params['application_policy_namespace']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/application-policy', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dna_intent_application_set_count(self, count, **kwargs):  # noqa: E501
        """Get Application Sets Count  # noqa: E501

        Invoke the API to return the number of defined application sets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dna_intent_application_set_count(count, async=True)
        >>> result = thread.get()

        :param async bool
        :param str count:  (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_dna_intent_application_set_count_with_http_info(count, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dna_intent_application_set_count_with_http_info(count, **kwargs)  # noqa: E501
            return data

    def get_dna_intent_application_set_count_with_http_info(self, count, **kwargs):  # noqa: E501
        """Get Application Sets Count  # noqa: E501

        Invoke the API to return the number of defined application sets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dna_intent_application_set_count_with_http_info(count, async=True)
        >>> result = thread.get()

        :param async bool
        :param str count:  (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['count', 'runsync', 'timeout']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dna_intent_application_set_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'count' is set
        if ('count' not in params or
                params['count'] is None):
            raise ValueError("Missing the required parameter `count` when calling `get_dna_intent_application_set_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'count' in params:
            path_params['count'] = params['count']  # noqa: E501

        query_params = []

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/application-set/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dna_intent_application_sets(self, **kwargs):  # noqa: E501
        """Get Application Sets  # noqa: E501

        Invoke the API to return all (or specific) defined application-set(s)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dna_intent_application_sets(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :param float offset: 
        :param float limit: 
        :param str application_set_name: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_dna_intent_application_sets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_dna_intent_application_sets_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_dna_intent_application_sets_with_http_info(self, **kwargs):  # noqa: E501
        """Get Application Sets  # noqa: E501

        Invoke the API to return all (or specific) defined application-set(s)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dna_intent_application_sets_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :param float offset: 
        :param float limit: 
        :param str application_set_name: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['runsync', 'timeout', 'offset', 'limit', 'application_set_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dna_intent_application_sets" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501
        if 'offset' in params:
            header_params['offset'] = params['offset']  # noqa: E501
        if 'limit' in params:
            header_params['limit'] = params['limit']  # noqa: E501
        if 'application_set_name' in params:
            header_params['applicationSetName'] = params['application_set_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/application-sets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dna_intent_applications(self, **kwargs):  # noqa: E501
        """Get Applications  # noqa: E501

        Invoke the API to return the list of all (or specific) defined application(s)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dna_intent_applications(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :param float offset: 
        :param float limit: 
        :param str application_name: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_dna_intent_applications_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_dna_intent_applications_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_dna_intent_applications_with_http_info(self, **kwargs):  # noqa: E501
        """Get Applications  # noqa: E501

        Invoke the API to return the list of all (or specific) defined application(s)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dna_intent_applications_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :param float offset: 
        :param float limit: 
        :param str application_name: 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['runsync', 'timeout', 'offset', 'limit', 'application_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dna_intent_applications" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501
        if 'offset' in params:
            header_params['offset'] = params['offset']  # noqa: E501
        if 'limit' in params:
            header_params['limit'] = params['limit']  # noqa: E501
        if 'application_name' in params:
            header_params['applicationName'] = params['application_name']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/applications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dna_intent_clie_detail(self, timestamp, mac_address, **kwargs):  # noqa: E501
        """Client Detail  # noqa: E501

        Get Client Details for a single client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dna_intent_clie_detail(timestamp, mac_address, async=True)
        >>> result = thread.get()

        :param async bool
        :param str timestamp: timestamp (required)
        :param str mac_address: MAC Address of the client (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: ClientDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_dna_intent_clie_detail_with_http_info(timestamp, mac_address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dna_intent_clie_detail_with_http_info(timestamp, mac_address, **kwargs)  # noqa: E501
            return data

    def get_dna_intent_clie_detail_with_http_info(self, timestamp, mac_address, **kwargs):  # noqa: E501
        """Client Detail  # noqa: E501

        Get Client Details for a single client  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dna_intent_clie_detail_with_http_info(timestamp, mac_address, async=True)
        >>> result = thread.get()

        :param async bool
        :param str timestamp: timestamp (required)
        :param str mac_address: MAC Address of the client (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: ClientDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'mac_address', 'runsync', 'timeout']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dna_intent_clie_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `get_dna_intent_clie_detail`")  # noqa: E501
        # verify the required parameter 'mac_address' is set
        if ('mac_address' not in params or
                params['mac_address'] is None):
            raise ValueError("Missing the required parameter `mac_address` when calling `get_dna_intent_clie_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'mac_address' in params:
            query_params.append(('macAddress', params['mac_address']))  # noqa: E501

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/client-detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dna_intent_client_health(self, start_time, end_time, **kwargs):  # noqa: E501
        """Client Health  # noqa: E501

        Get overall Client Health along with beak down on categories of wired and wireless  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dna_intent_client_health(start_time, end_time, async=True)
        >>> result = thread.get()

        :param async bool
        :param str start_time: Start Time (required)
        :param str end_time: End Time (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: ClientHealthResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_dna_intent_client_health_with_http_info(start_time, end_time, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dna_intent_client_health_with_http_info(start_time, end_time, **kwargs)  # noqa: E501
            return data

    def get_dna_intent_client_health_with_http_info(self, start_time, end_time, **kwargs):  # noqa: E501
        """Client Health  # noqa: E501

        Get overall Client Health along with beak down on categories of wired and wireless  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dna_intent_client_health_with_http_info(start_time, end_time, async=True)
        >>> result = thread.get()

        :param async bool
        :param str start_time: Start Time (required)
        :param str end_time: End Time (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: ClientHealthResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_time', 'end_time', 'runsync', 'timeout']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dna_intent_client_health" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params or
                params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `get_dna_intent_client_health`")  # noqa: E501
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params or
                params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `get_dna_intent_client_health`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/client-health', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ClientHealthResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dna_intent_network_device_detail(self, **kwargs):  # noqa: E501
        """Network Device Detail  # noqa: E501

        Get Network Device Detail  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dna_intent_network_device_detail(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :param str timestamp: timestamp
        :param str search_by: MAC Address or UUID or Name of the Device
        :param str identifier: macAddress or uuid or nwDeviceName
        :return: NetworkDeviceDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_dna_intent_network_device_detail_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_dna_intent_network_device_detail_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_dna_intent_network_device_detail_with_http_info(self, **kwargs):  # noqa: E501
        """Network Device Detail  # noqa: E501

        Get Network Device Detail  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dna_intent_network_device_detail_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :param str timestamp: timestamp
        :param str search_by: MAC Address or UUID or Name of the Device
        :param str identifier: macAddress or uuid or nwDeviceName
        :return: NetworkDeviceDetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['runsync', 'timeout', 'timestamp', 'search_by', 'identifier']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dna_intent_network_device_detail" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'search_by' in params:
            query_params.append(('searchBy', params['search_by']))  # noqa: E501
        if 'identifier' in params:
            query_params.append(('identifier', params['identifier']))  # noqa: E501

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/network-device-detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkDeviceDetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dna_intent_network_health(self, start_time, end_time, **kwargs):  # noqa: E501
        """Network Health  # noqa: E501

        Network Devices and their health by category  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dna_intent_network_health(start_time, end_time, async=True)
        >>> result = thread.get()

        :param async bool
        :param str start_time: Start Time (required)
        :param str end_time: End Time (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_dna_intent_network_health_with_http_info(start_time, end_time, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dna_intent_network_health_with_http_info(start_time, end_time, **kwargs)  # noqa: E501
            return data

    def get_dna_intent_network_health_with_http_info(self, start_time, end_time, **kwargs):  # noqa: E501
        """Network Health  # noqa: E501

        Network Devices and their health by category  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dna_intent_network_health_with_http_info(start_time, end_time, async=True)
        >>> result = thread.get()

        :param async bool
        :param str start_time: Start Time (required)
        :param str end_time: End Time (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_time', 'end_time', 'runsync', 'timeout']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dna_intent_network_health" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params or
                params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `get_dna_intent_network_health`")  # noqa: E501
        # verify the required parameter 'end_time' is set
        if ('end_time' not in params or
                params['end_time'] is None):
            raise ValueError("Missing the required parameter `end_time` when calling `get_dna_intent_network_health`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_time' in params:
            query_params.append(('startTime', params['start_time']))  # noqa: E501
        if 'end_time' in params:
            query_params.append(('endTime', params['end_time']))  # noqa: E501

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/network-health', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dna_intent_site_hierarchy(self, timestamp, **kwargs):  # noqa: E501
        """Site Hierarchy  # noqa: E501

        Site Hierarchy along with health Info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dna_intent_site_hierarchy(timestamp, async=True)
        >>> result = thread.get()

        :param async bool
        :param str timestamp: Timestamp  (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: SiteHierarchyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_dna_intent_site_hierarchy_with_http_info(timestamp, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dna_intent_site_hierarchy_with_http_info(timestamp, **kwargs)  # noqa: E501
            return data

    def get_dna_intent_site_hierarchy_with_http_info(self, timestamp, **kwargs):  # noqa: E501
        """Site Hierarchy  # noqa: E501

        Site Hierarchy along with health Info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dna_intent_site_hierarchy_with_http_info(timestamp, async=True)
        >>> result = thread.get()

        :param async bool
        :param str timestamp: Timestamp  (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: SiteHierarchyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['timestamp', 'runsync', 'timeout']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dna_intent_site_hierarchy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `get_dna_intent_site_hierarchy`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/site-hierarchy', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SiteHierarchyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dna_intent_create_application(self, **kwargs):  # noqa: E501
        """Post Application  # noqa: E501

        Invoke the API to create a custom application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_dna_intent_create_application(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_dna_intent_create_application_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_dna_intent_create_application_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_dna_intent_create_application_with_http_info(self, **kwargs):  # noqa: E501
        """Post Application  # noqa: E501

        Invoke the API to create a custom application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_dna_intent_create_application_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['runsync', 'timeout']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dna_intent_create_application" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/create-application', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dna_intent_create_application_policy(self, **kwargs):  # noqa: E501
        """Post Application Policy Intent  # noqa: E501

        Invoke the API to create, modify or delete an application-policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_dna_intent_create_application_policy(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_dna_intent_create_application_policy_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_dna_intent_create_application_policy_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_dna_intent_create_application_policy_with_http_info(self, **kwargs):  # noqa: E501
        """Post Application Policy Intent  # noqa: E501

        Invoke the API to create, modify or delete an application-policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_dna_intent_create_application_policy_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['runsync', 'timeout']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dna_intent_create_application_policy" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/create-application-policy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dna_intent_create_application_set(self, **kwargs):  # noqa: E501
        """Post Application Set  # noqa: E501

        Invoke the API to create a custom application set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_dna_intent_create_application_set(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_dna_intent_create_application_set_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_dna_intent_create_application_set_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_dna_intent_create_application_set_with_http_info(self, **kwargs):  # noqa: E501
        """Post Application Set  # noqa: E501

        Invoke the API to create a custom application set  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_dna_intent_create_application_set_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['runsync', 'timeout']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dna_intent_create_application_set" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/create-application-set', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_dna_intent_create_ssid(self, request, **kwargs):  # noqa: E501
        """Create SSID  # noqa: E501

        Creates non fabric enterprise SSID, dynamic interface, Wireless Network Profile and provisions WLC and AP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_dna_intent_create_ssid(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateSSIDRequest request: request (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: CreateSSIDResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_dna_intent_create_ssid_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.post_dna_intent_create_ssid_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def post_dna_intent_create_ssid_with_http_info(self, request, **kwargs):  # noqa: E501
        """Create SSID  # noqa: E501

        Creates non fabric enterprise SSID, dynamic interface, Wireless Network Profile and provisions WLC and AP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_dna_intent_create_ssid_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateSSIDRequest request: request (required)
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: CreateSSIDResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'runsync', 'timeout']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_dna_intent_create_ssid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `post_dna_intent_create_ssid`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/create-ssid', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateSSIDResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_dna_intent_update_application(self, **kwargs):  # noqa: E501
        """Edit Application  # noqa: E501

        Invoke the API to create a custom application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_dna_intent_update_application(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.put_dna_intent_update_application_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.put_dna_intent_update_application_with_http_info(**kwargs)  # noqa: E501
            return data

    def put_dna_intent_update_application_with_http_info(self, **kwargs):  # noqa: E501
        """Edit Application  # noqa: E501

        Invoke the API to create a custom application  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_dna_intent_update_application_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool runsync: Enable this parameter to execute the API and return a response synchronously
        :param float timeout: During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['runsync', 'timeout']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_dna_intent_update_application" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'runsync' in params:
            header_params['__runsync'] = params['runsync']  # noqa: E501
        if 'timeout' in params:
            header_params['__timeout'] = params['timeout']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dna/intent/api/v1/update-application', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
