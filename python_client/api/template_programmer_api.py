# coding: utf-8

"""
    Swagger

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from python_client.api_client import ApiClient


class TemplateProgrammerApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_template_programmer_project_by_project_id(self, project_id, **kwargs):  # noqa: E501
        """Deletes the project  # noqa: E501

        Deletes the project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_template_programmer_project_by_project_id(project_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_id: projectId (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_template_programmer_project_by_project_id_with_http_info(project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_template_programmer_project_by_project_id_with_http_info(project_id, **kwargs)  # noqa: E501
            return data

    def delete_template_programmer_project_by_project_id_with_http_info(self, project_id, **kwargs):  # noqa: E501
        """Deletes the project  # noqa: E501

        Deletes the project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_template_programmer_project_by_project_id_with_http_info(project_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_id: projectId (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_template_programmer_project_by_project_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `delete_template_programmer_project_by_project_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/project/${projectId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_template_programmer_template_by_template_id(self, template_id, **kwargs):  # noqa: E501
        """Deletes the template  # noqa: E501

        Deletes the template  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_template_programmer_template_by_template_id(template_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str template_id: templateId (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_template_programmer_template_by_template_id_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_template_programmer_template_by_template_id_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def delete_template_programmer_template_by_template_id_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Deletes the template  # noqa: E501

        Deletes the template  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_template_programmer_template_by_template_id_with_http_info(template_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str template_id: templateId (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_template_programmer_template_by_template_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `delete_template_programmer_template_by_template_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['templateId'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/template/${templateId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_programmer_project(self, **kwargs):  # noqa: E501
        """Gets a list of projects  # noqa: E501

        List the projects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_template_programmer_project(async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of project to be searched
        :return: CollectionProjectDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_template_programmer_project_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_template_programmer_project_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_template_programmer_project_with_http_info(self, **kwargs):  # noqa: E501
        """Gets a list of projects  # noqa: E501

        List the projects  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_template_programmer_project_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: Name of project to be searched
        :return: CollectionProjectDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_programmer_project" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/project', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionProjectDTO',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_programmer_template(self, **kwargs):  # noqa: E501
        """Gets the templates available depending on the criteria  # noqa: E501

        Gets the templates available depending on the criteria  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_template_programmer_template(async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_id: projectId
        :param str software_type: softwareType
        :param str software_version: softwareVersion
        :param str product_family: productFamily
        :param str product_series: productSeries
        :param str product_type: productType
        :param bool include_head: includeHead
        :param bool filter_conflicting_templates: filterConflictingTemplates
        :return: CollectionTemplateInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_template_programmer_template_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_template_programmer_template_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_template_programmer_template_with_http_info(self, **kwargs):  # noqa: E501
        """Gets the templates available depending on the criteria  # noqa: E501

        Gets the templates available depending on the criteria  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_template_programmer_template_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str project_id: projectId
        :param str software_type: softwareType
        :param str software_version: softwareVersion
        :param str product_family: productFamily
        :param str product_series: productSeries
        :param str product_type: productType
        :param bool include_head: includeHead
        :param bool filter_conflicting_templates: filterConflictingTemplates
        :return: CollectionTemplateInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['project_id', 'software_type', 'software_version', 'product_family', 'product_series', 'product_type', 'include_head', 'filter_conflicting_templates']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_programmer_template" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'project_id' in params:
            query_params.append(('projectId', params['project_id']))  # noqa: E501
        if 'software_type' in params:
            query_params.append(('softwareType', params['software_type']))  # noqa: E501
        if 'software_version' in params:
            query_params.append(('softwareVersion', params['software_version']))  # noqa: E501
        if 'product_family' in params:
            query_params.append(('productFamily', params['product_family']))  # noqa: E501
        if 'product_series' in params:
            query_params.append(('productSeries', params['product_series']))  # noqa: E501
        if 'product_type' in params:
            query_params.append(('productType', params['product_type']))  # noqa: E501
        if 'include_head' in params:
            query_params.append(('includeHead', params['include_head']))  # noqa: E501
        if 'filter_conflicting_templates' in params:
            query_params.append(('filterConflictingTemplates', params['filter_conflicting_templates']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/template', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionTemplateInfo',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_programmer_template_deploy_status_by_deployment_id(self, deployment_id, **kwargs):  # noqa: E501
        """Status of template deployment  # noqa: E501

        API to retrieve the status of template deployment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_template_programmer_template_deploy_status_by_deployment_id(deployment_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str deployment_id: deploymentId (required)
        :return: TemplateDeploymentStatusDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_template_programmer_template_deploy_status_by_deployment_id_with_http_info(deployment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_programmer_template_deploy_status_by_deployment_id_with_http_info(deployment_id, **kwargs)  # noqa: E501
            return data

    def get_template_programmer_template_deploy_status_by_deployment_id_with_http_info(self, deployment_id, **kwargs):  # noqa: E501
        """Status of template deployment  # noqa: E501

        API to retrieve the status of template deployment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_template_programmer_template_deploy_status_by_deployment_id_with_http_info(deployment_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str deployment_id: deploymentId (required)
        :return: TemplateDeploymentStatusDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deployment_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_programmer_template_deploy_status_by_deployment_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deployment_id' is set
        if ('deployment_id' not in params or
                params['deployment_id'] is None):
            raise ValueError("Missing the required parameter `deployment_id` when calling `get_template_programmer_template_deploy_status_by_deployment_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'deployment_id' in params:
            path_params['deploymentId'] = params['deployment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/template/deploy/status/${deploymentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateDeploymentStatusDTO',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_template_programmer_template_version_by_templete_id(self, template_id, **kwargs):  # noqa: E501
        """Gets all the versions of a given template  # noqa: E501

        Get all the versions of template  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_template_programmer_template_version_by_templete_id(template_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str template_id: templateId (required)
        :return: CollectionTemplateInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_template_programmer_template_version_by_templete_id_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_template_programmer_template_version_by_templete_id_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def get_template_programmer_template_version_by_templete_id_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Gets all the versions of a given template  # noqa: E501

        Get all the versions of template  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_template_programmer_template_version_by_templete_id_with_http_info(template_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str template_id: templateId (required)
        :return: CollectionTemplateInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_template_programmer_template_version_by_templete_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `get_template_programmer_template_version_by_templete_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['templateId'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/template/version/${templateId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionTemplateInfo',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_template_programmer_project(self, request, **kwargs):  # noqa: E501
        """Create Project  # noqa: E501

        This API is used to create a new project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_template_programmer_project(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ProjectDTO request: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_template_programmer_project_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.post_template_programmer_project_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def post_template_programmer_project_with_http_info(self, request, **kwargs):  # noqa: E501
        """Create Project  # noqa: E501

        This API is used to create a new project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_template_programmer_project_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ProjectDTO request: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_template_programmer_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `post_template_programmer_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/project', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_template_programmer_project_template_by_project_id(self, request, project_id, **kwargs):  # noqa: E501
        """Create Template  # noqa: E501

        API to create a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_template_programmer_project_template_by_project_id(request, project_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param TemplateDTO request: request (required)
        :param str project_id: projectId (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_template_programmer_project_template_by_project_id_with_http_info(request, project_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_template_programmer_project_template_by_project_id_with_http_info(request, project_id, **kwargs)  # noqa: E501
            return data

    def post_template_programmer_project_template_by_project_id_with_http_info(self, request, project_id, **kwargs):  # noqa: E501
        """Create Template  # noqa: E501

        API to create a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_template_programmer_project_template_by_project_id_with_http_info(request, project_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param TemplateDTO request: request (required)
        :param str project_id: projectId (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'project_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_template_programmer_project_template_by_project_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `post_template_programmer_project_template_by_project_id`")  # noqa: E501
        # verify the required parameter 'project_id' is set
        if ('project_id' not in params or
                params['project_id'] is None):
            raise ValueError("Missing the required parameter `project_id` when calling `post_template_programmer_project_template_by_project_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'project_id' in params:
            path_params['projectId'] = params['project_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/project/${projectId}/template', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_template_programmer_template_deploy(self, request, **kwargs):  # noqa: E501
        """Deploy Template  # noqa: E501

        API to deploy a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_template_programmer_template_deploy(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param TemplateDeploymentInfo request: request (required)
        :return: TemplateDeploymentStatusDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_template_programmer_template_deploy_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.post_template_programmer_template_deploy_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def post_template_programmer_template_deploy_with_http_info(self, request, **kwargs):  # noqa: E501
        """Deploy Template  # noqa: E501

        API to deploy a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_template_programmer_template_deploy_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param TemplateDeploymentInfo request: request (required)
        :return: TemplateDeploymentStatusDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_template_programmer_template_deploy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `post_template_programmer_template_deploy`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/template/deploy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateDeploymentStatusDTO',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_template_programmer_template_version(self, request, **kwargs):  # noqa: E501
        """Version Template  # noqa: E501

        API to version the current contents of the template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_template_programmer_template_version(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param TemplateVersionRequestDTO request: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_template_programmer_template_version_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.post_template_programmer_template_version_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def post_template_programmer_template_version_with_http_info(self, request, **kwargs):  # noqa: E501
        """Version Template  # noqa: E501

        API to version the current contents of the template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_template_programmer_template_version_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param TemplateVersionRequestDTO request: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_template_programmer_template_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `post_template_programmer_template_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/template/version', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_template_programmer_project(self, request, **kwargs):  # noqa: E501
        """Update Project  # noqa: E501

        This API is used to update an existing project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_template_programmer_project(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ProjectDTO request: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.put_template_programmer_project_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.put_template_programmer_project_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def put_template_programmer_project_with_http_info(self, request, **kwargs):  # noqa: E501
        """Update Project  # noqa: E501

        This API is used to update an existing project.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_template_programmer_project_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param ProjectDTO request: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_template_programmer_project" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `put_template_programmer_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/project', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_template_programmer_template(self, request, **kwargs):  # noqa: E501
        """Update Template  # noqa: E501

        API to update a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_template_programmer_template(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param TemplateDTO request: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.put_template_programmer_template_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.put_template_programmer_template_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def put_template_programmer_template_with_http_info(self, request, **kwargs):  # noqa: E501
        """Update Template  # noqa: E501

        API to update a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_template_programmer_template_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param TemplateDTO request: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_template_programmer_template" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `put_template_programmer_template`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/template', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_template_programmer_template_preview(self, request, **kwargs):  # noqa: E501
        """Preview Template  # noqa: E501

        API to preview a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_template_programmer_template_preview(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param TemplatePreviewRequestDTO request: request (required)
        :return: TemplatePreviewResponseDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.put_template_programmer_template_preview_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.put_template_programmer_template_preview_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def put_template_programmer_template_preview_with_http_info(self, request, **kwargs):  # noqa: E501
        """Preview Template  # noqa: E501

        API to preview a template.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_template_programmer_template_preview_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param TemplatePreviewRequestDTO request: request (required)
        :return: TemplatePreviewResponseDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_template_programmer_template_preview" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `put_template_programmer_template_preview`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/template/preview', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplatePreviewResponseDTO',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def template_programmer_template_by_template_id(self, template_id, **kwargs):  # noqa: E501
        """Gets details of a given template  # noqa: E501

        Details of the template  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.template_programmer_template_by_template_id(template_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str template_id: templateId (required)
        :return: TemplateDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.template_programmer_template_by_template_id_with_http_info(template_id, **kwargs)  # noqa: E501
        else:
            (data) = self.template_programmer_template_by_template_id_with_http_info(template_id, **kwargs)  # noqa: E501
            return data

    def template_programmer_template_by_template_id_with_http_info(self, template_id, **kwargs):  # noqa: E501
        """Gets details of a given template  # noqa: E501

        Details of the template  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.template_programmer_template_by_template_id_with_http_info(template_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str template_id: templateId (required)
        :return: TemplateDTO
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['template_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method template_programmer_template_by_template_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'template_id' is set
        if ('template_id' not in params or
                params['template_id'] is None):
            raise ValueError("Missing the required parameter `template_id` when calling `template_programmer_template_by_template_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'template_id' in params:
            path_params['templateId'] = params['template_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/template-programmer/template/${templateId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TemplateDTO',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
