# coding: utf-8

"""
    Swagger

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from python_client.api_client import ApiClient


class DiscoveryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_discovery(self, **kwargs):  # noqa: E501
        """Deletes all discovery  # noqa: E501

        Stops all the discoveries and removes them  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_discovery(async=True)
        >>> result = thread.get()

        :param async bool
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_discovery_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.delete_discovery_with_http_info(**kwargs)  # noqa: E501
            return data

    def delete_discovery_with_http_info(self, **kwargs):  # noqa: E501
        """Deletes all discovery  # noqa: E501

        Stops all the discoveries and removes them  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_discovery_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_discovery" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/discovery', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_discovery_by_id(self, id, **kwargs):  # noqa: E501
        """Deletes the discovery specified by id  # noqa: E501

        Stops the discovery for the given ID and removes it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_discovery_by_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Discovery ID (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_discovery_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_discovery_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def delete_discovery_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Deletes the discovery specified by id  # noqa: E501

        Stops the discovery for the given ID and removes it  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_discovery_by_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Discovery ID (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_discovery_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_discovery_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/discovery/${id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_discovery_range(self, start_index, records_to_delete, **kwargs):  # noqa: E501
        """Deletes the discovery in the given range  # noqa: E501

        Stops discovery for the given range and removes them  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_discovery_range(start_index, records_to_delete, async=True)
        >>> result = thread.get()

        :param async bool
        :param int start_index: Start index (required)
        :param int records_to_delete: Number of records to delete (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_discovery_range_with_http_info(start_index, records_to_delete, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_discovery_range_with_http_info(start_index, records_to_delete, **kwargs)  # noqa: E501
            return data

    def delete_discovery_range_with_http_info(self, start_index, records_to_delete, **kwargs):  # noqa: E501
        """Deletes the discovery in the given range  # noqa: E501

        Stops discovery for the given range and removes them  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_discovery_range_with_http_info(start_index, records_to_delete, async=True)
        >>> result = thread.get()

        :param async bool
        :param int start_index: Start index (required)
        :param int records_to_delete: Number of records to delete (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_index', 'records_to_delete']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_discovery_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_index' is set
        if ('start_index' not in params or
                params['start_index'] is None):
            raise ValueError("Missing the required parameter `start_index` when calling `delete_discovery_range`")  # noqa: E501
        # verify the required parameter 'records_to_delete' is set
        if ('records_to_delete' not in params or
                params['records_to_delete'] is None):
            raise ValueError("Missing the required parameter `records_to_delete` when calling `delete_discovery_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'start_index' in params:
            path_params['startIndex'] = params['start_index']  # noqa: E501
        if 'records_to_delete' in params:
            path_params['recordsToDelete'] = params['records_to_delete']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/discovery/${startIndex}/${recordsToDelete}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_discovery_auto_complete_by_id(self, id, **kwargs):  # noqa: E501
        """Retrieve autoComplete values from a discovery based on id  # noqa: E501

        Gets the autoComplete values from a discovery job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_discovery_auto_complete_by_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :param str task_id: taskId
        :param str ip_address: ipAddress
        :param str ping_status: pingStatus
        :param str snmp_status: snmpStatus
        :param str cli_status: cliStatus
        :param str netconf_status: netconfStatus
        :param str http_status: httpStatus
        :return: SuccessResultList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_discovery_auto_complete_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_discovery_auto_complete_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_discovery_auto_complete_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve autoComplete values from a discovery based on id  # noqa: E501

        Gets the autoComplete values from a discovery job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_discovery_auto_complete_by_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :param str task_id: taskId
        :param str ip_address: ipAddress
        :param str ping_status: pingStatus
        :param str snmp_status: snmpStatus
        :param str cli_status: cliStatus
        :param str netconf_status: netconfStatus
        :param str http_status: httpStatus
        :return: SuccessResultList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'task_id', 'ip_address', 'ping_status', 'snmp_status', 'cli_status', 'netconf_status', 'http_status']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discovery_auto_complete_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_discovery_auto_complete_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'task_id' in params:
            query_params.append(('taskId', params['task_id']))  # noqa: E501
        if 'ip_address' in params:
            query_params.append(('ipAddress', params['ip_address']))  # noqa: E501
        if 'ping_status' in params:
            query_params.append(('pingStatus', params['ping_status']))  # noqa: E501
        if 'snmp_status' in params:
            query_params.append(('snmpStatus', params['snmp_status']))  # noqa: E501
        if 'cli_status' in params:
            query_params.append(('cliStatus', params['cli_status']))  # noqa: E501
        if 'netconf_status' in params:
            query_params.append(('netconfStatus', params['netconf_status']))  # noqa: E501
        if 'http_status' in params:
            query_params.append(('httpStatus', params['http_status']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/discovery/${id}/autoComplete', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessResultList',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_discovery_by_id(self, id, **kwargs):  # noqa: E501
        """Retrieves the discovery specified by id  # noqa: E501

        Gets discovery by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_discovery_by_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Discovery ID (required)
        :return: DiscoveryNIOResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_discovery_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_discovery_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_discovery_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves the discovery specified by id  # noqa: E501

        Gets discovery by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_discovery_by_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Discovery ID (required)
        :return: DiscoveryNIOResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discovery_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_discovery_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/discovery/${id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DiscoveryNIOResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_discovery_count(self, **kwargs):  # noqa: E501
        """Retrieves the number of discoveries  # noqa: E501

        Gets the count of all available discovery jobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_discovery_count(async=True)
        >>> result = thread.get()

        :param async bool
        :return: CountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_discovery_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_discovery_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_discovery_count_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves the number of discoveries  # noqa: E501

        Gets the count of all available discovery jobs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_discovery_count_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: CountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discovery_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/discovery/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CountResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_discovery_job(self, ip_address, **kwargs):  # noqa: E501
        """Retrieves the list of discovery jobs for the given IP  # noqa: E501

        Gets the list of discovery jobs for the given IP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_discovery_job(ip_address, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ip_address: ipAddress (required)
        :param int offset: offset
        :param int limit: limit
        :param str name: name
        :return: DiscoveryJobNIOListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_discovery_job_with_http_info(ip_address, **kwargs)  # noqa: E501
        else:
            (data) = self.get_discovery_job_with_http_info(ip_address, **kwargs)  # noqa: E501
            return data

    def get_discovery_job_with_http_info(self, ip_address, **kwargs):  # noqa: E501
        """Retrieves the list of discovery jobs for the given IP  # noqa: E501

        Gets the list of discovery jobs for the given IP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_discovery_job_with_http_info(ip_address, async=True)
        >>> result = thread.get()

        :param async bool
        :param str ip_address: ipAddress (required)
        :param int offset: offset
        :param int limit: limit
        :param str name: name
        :return: DiscoveryJobNIOListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ip_address', 'offset', 'limit', 'name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discovery_job" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ip_address' is set
        if ('ip_address' not in params or
                params['ip_address'] is None):
            raise ValueError("Missing the required parameter `ip_address` when calling `get_discovery_job`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'ip_address' in params:
            query_params.append(('ipAddress', params['ip_address']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/discovery/job', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DiscoveryJobNIOListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_discovery_job_by_id(self, id, **kwargs):  # noqa: E501
        """Retrieves list of discovery jobs for the specified discovery id  # noqa: E501

        Gets the list of discovery jobs for the given id. The result can optionally be filtered based on IP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_discovery_job_by_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Discovery ID (required)
        :param int offset: offset
        :param int limit: limit
        :param str ip_address: ipAddress
        :return: DiscoveryJobNIOListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_discovery_job_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_discovery_job_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_discovery_job_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves list of discovery jobs for the specified discovery id  # noqa: E501

        Gets the list of discovery jobs for the given id. The result can optionally be filtered based on IP  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_discovery_job_by_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Discovery ID (required)
        :param int offset: offset
        :param int limit: limit
        :param str ip_address: ipAddress
        :return: DiscoveryJobNIOListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'offset', 'limit', 'ip_address']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discovery_job_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_discovery_job_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'ip_address' in params:
            query_params.append(('ipAddress', params['ip_address']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/discovery/${id}/job', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DiscoveryJobNIOListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_discovery_network_device_by_id_range(self, id, start_index, records_to_return, **kwargs):  # noqa: E501
        """Retrieves the range of network devices discovered for the given discovery  # noqa: E501

        Gets the network devices discovered for the given discovery and for the given range. The maximum number of records that could be retrieved is 500  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_discovery_network_device_by_id_range(id, start_index, records_to_return, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Discovery ID (required)
        :param int start_index: Start index (required)
        :param int records_to_return: Number of records to return (required)
        :param str task_id: taskId
        :return: NetworkDeviceNIOListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_discovery_network_device_by_id_range_with_http_info(id, start_index, records_to_return, **kwargs)  # noqa: E501
        else:
            (data) = self.get_discovery_network_device_by_id_range_with_http_info(id, start_index, records_to_return, **kwargs)  # noqa: E501
            return data

    def get_discovery_network_device_by_id_range_with_http_info(self, id, start_index, records_to_return, **kwargs):  # noqa: E501
        """Retrieves the range of network devices discovered for the given discovery  # noqa: E501

        Gets the network devices discovered for the given discovery and for the given range. The maximum number of records that could be retrieved is 500  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_discovery_network_device_by_id_range_with_http_info(id, start_index, records_to_return, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Discovery ID (required)
        :param int start_index: Start index (required)
        :param int records_to_return: Number of records to return (required)
        :param str task_id: taskId
        :return: NetworkDeviceNIOListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'start_index', 'records_to_return', 'task_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discovery_network_device_by_id_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_discovery_network_device_by_id_range`")  # noqa: E501
        # verify the required parameter 'start_index' is set
        if ('start_index' not in params or
                params['start_index'] is None):
            raise ValueError("Missing the required parameter `start_index` when calling `get_discovery_network_device_by_id_range`")  # noqa: E501
        # verify the required parameter 'records_to_return' is set
        if ('records_to_return' not in params or
                params['records_to_return'] is None):
            raise ValueError("Missing the required parameter `records_to_return` when calling `get_discovery_network_device_by_id_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'start_index' in params:
            path_params['startIndex'] = params['start_index']  # noqa: E501
        if 'records_to_return' in params:
            path_params['recordsToReturn'] = params['records_to_return']  # noqa: E501

        query_params = []
        if 'task_id' in params:
            query_params.append(('taskId', params['task_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/discovery/${id}/network-device/${startIndex}/${recordsToReturn}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkDeviceNIOListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_discovery_network_device_count_by_id(self, id, **kwargs):  # noqa: E501
        """Retrieves the number of network devices discovered in the discovery specified by id  # noqa: E501

        Gets the count of network devices discovered in the given discovery  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_discovery_network_device_count_by_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Discovery ID (required)
        :param str task_id: taskId
        :return: CountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_discovery_network_device_count_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_discovery_network_device_count_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_discovery_network_device_count_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves the number of network devices discovered in the discovery specified by id  # noqa: E501

        Gets the count of network devices discovered in the given discovery  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_discovery_network_device_count_by_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: Discovery ID (required)
        :param str task_id: taskId
        :return: CountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'task_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discovery_network_device_count_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_discovery_network_device_count_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'task_id' in params:
            query_params.append(('taskId', params['task_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/discovery/${id}/network-device/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CountResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_discovery_network_network_device_by_id(self, id, **kwargs):  # noqa: E501
        """Retrieves the network devices discovered in the discovery specified by id  # noqa: E501

        Gets the network devices discovered for the given discovery  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_discovery_network_network_device_by_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :param str task_id: taskId
        :return: NetworkDeviceNIOListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_discovery_network_network_device_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_discovery_network_network_device_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_discovery_network_network_device_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves the network devices discovered in the discovery specified by id  # noqa: E501

        Gets the network devices discovered for the given discovery  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_discovery_network_network_device_by_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :param str task_id: taskId
        :return: NetworkDeviceNIOListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'task_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discovery_network_network_device_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_discovery_network_network_device_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'task_id' in params:
            query_params.append(('taskId', params['task_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/discovery/${id}/network-device', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NetworkDeviceNIOListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_discovery_range(self, start_index, records_to_return, **kwargs):  # noqa: E501
        """Retrieves the discovery in the given range  # noqa: E501

        Gets the discovery for the range specified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_discovery_range(start_index, records_to_return, async=True)
        >>> result = thread.get()

        :param async bool
        :param int start_index: Start index (required)
        :param int records_to_return: Number of records to return (required)
        :return: DiscoveryNIOListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_discovery_range_with_http_info(start_index, records_to_return, **kwargs)  # noqa: E501
        else:
            (data) = self.get_discovery_range_with_http_info(start_index, records_to_return, **kwargs)  # noqa: E501
            return data

    def get_discovery_range_with_http_info(self, start_index, records_to_return, **kwargs):  # noqa: E501
        """Retrieves the discovery in the given range  # noqa: E501

        Gets the discovery for the range specified  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_discovery_range_with_http_info(start_index, records_to_return, async=True)
        >>> result = thread.get()

        :param async bool
        :param int start_index: Start index (required)
        :param int records_to_return: Number of records to return (required)
        :return: DiscoveryNIOListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_index', 'records_to_return']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discovery_range" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_index' is set
        if ('start_index' not in params or
                params['start_index'] is None):
            raise ValueError("Missing the required parameter `start_index` when calling `get_discovery_range`")  # noqa: E501
        # verify the required parameter 'records_to_return' is set
        if ('records_to_return' not in params or
                params['records_to_return'] is None):
            raise ValueError("Missing the required parameter `records_to_return` when calling `get_discovery_range`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'start_index' in params:
            path_params['startIndex'] = params['start_index']  # noqa: E501
        if 'records_to_return' in params:
            path_params['recordsToReturn'] = params['records_to_return']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/discovery/${startIndex}/${recordsToReturn}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DiscoveryNIOListResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_discovery_summary_by_id(self, id, **kwargs):  # noqa: E501
        """Retrieve network devices from a discovery on given filters  # noqa: E501

        Gets the network devices from a discovery job based on given filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_discovery_summary_by_id(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :param str task_id: taskId
        :param str sort_by: sortBy
        :param str sort_order: sortOrder
        :param list[str] ip_address: ipAddress
        :param list[str] ping_status: pingStatus
        :param list[str] snmp_status: snmpStatus
        :param list[str] cli_status: cliStatus
        :param list[str] netconf_status: netconfStatus
        :param list[str] http_status: httpStatus
        :return: CountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_discovery_summary_by_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_discovery_summary_by_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_discovery_summary_by_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve network devices from a discovery on given filters  # noqa: E501

        Gets the network devices from a discovery job based on given filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_discovery_summary_by_id_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :param str task_id: taskId
        :param str sort_by: sortBy
        :param str sort_order: sortOrder
        :param list[str] ip_address: ipAddress
        :param list[str] ping_status: pingStatus
        :param list[str] snmp_status: snmpStatus
        :param list[str] cli_status: cliStatus
        :param list[str] netconf_status: netconfStatus
        :param list[str] http_status: httpStatus
        :return: CountResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'task_id', 'sort_by', 'sort_order', 'ip_address', 'ping_status', 'snmp_status', 'cli_status', 'netconf_status', 'http_status']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_discovery_summary_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_discovery_summary_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'task_id' in params:
            query_params.append(('taskId', params['task_id']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'ip_address' in params:
            query_params.append(('ipAddress', params['ip_address']))  # noqa: E501
            collection_formats['ipAddress'] = 'csv'  # noqa: E501
        if 'ping_status' in params:
            query_params.append(('pingStatus', params['ping_status']))  # noqa: E501
            collection_formats['pingStatus'] = 'csv'  # noqa: E501
        if 'snmp_status' in params:
            query_params.append(('snmpStatus', params['snmp_status']))  # noqa: E501
            collection_formats['snmpStatus'] = 'csv'  # noqa: E501
        if 'cli_status' in params:
            query_params.append(('cliStatus', params['cli_status']))  # noqa: E501
            collection_formats['cliStatus'] = 'csv'  # noqa: E501
        if 'netconf_status' in params:
            query_params.append(('netconfStatus', params['netconf_status']))  # noqa: E501
            collection_formats['netconfStatus'] = 'csv'  # noqa: E501
        if 'http_status' in params:
            query_params.append(('httpStatus', params['http_status']))  # noqa: E501
            collection_formats['httpStatus'] = 'csv'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/discovery/${id}/summary', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CountResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_discovery(self, request, **kwargs):  # noqa: E501
        """Starts a new discovery process and returns a task-id  # noqa: E501

        Initiates discovery with the given parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_discovery(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param InventoryRequest request: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.post_discovery_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.post_discovery_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def post_discovery_with_http_info(self, request, **kwargs):  # noqa: E501
        """Starts a new discovery process and returns a task-id  # noqa: E501

        Initiates discovery with the given parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.post_discovery_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param InventoryRequest request: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_discovery" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `post_discovery`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/discovery', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_discovery(self, request, **kwargs):  # noqa: E501
        """Updates an existing discovery specified by id - only for starting/stopping the discovery  # noqa: E501

        Stops or starts an existing discovery  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_discovery(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DiscoveryNIO request: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.put_discovery_with_http_info(request, **kwargs)  # noqa: E501
        else:
            (data) = self.put_discovery_with_http_info(request, **kwargs)  # noqa: E501
            return data

    def put_discovery_with_http_info(self, request, **kwargs):  # noqa: E501
        """Updates an existing discovery specified by id - only for starting/stopping the discovery  # noqa: E501

        Stops or starts an existing discovery  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.put_discovery_with_http_info(request, async=True)
        >>> result = thread.get()

        :param async bool
        :param DiscoveryNIO request: request (required)
        :return: TaskIdResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_discovery" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `put_discovery`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/discovery', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TaskIdResult',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
